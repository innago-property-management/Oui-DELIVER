name: "Check Licenses"
description: "Checks licenses against an allowed list and outputs a report artifact for each project"
inputs:
  allowed_licenses_path:
    required: true
    description: "Path to the allowed licenses JSON file"
  ignored_packages_path:
    required: true
    description: "Path to the ignored packages JSON file"
runs:
  using: "composite"
  steps:
    - name: Install jq
      uses: dcarbone/install-jq-action@f0e10f46ff84f4d32178b4b76e1ef180b16f82c3 #v3.1.1
    - name: Find csproj files
      id: find_projects
      shell: bash
      run: |
        PROJECTS=$(find src -name "*.csproj" | tr '\n' ' ' | sed 's/ $/"/' | sed 's/ /","/g' | sed 's/^/"/')
        PROJECTS="[${PROJECTS}]"
    - name: Check Licenses for each project
      shell: bash
      env:
        ALLOWED_LICENSES_PATH: ${{ inputs.allowed_licenses_path }}
        IGNORED_PACKAGES_PATH: ${{ inputs.ignored_packages_path }}
      run: |
       dotnet tool install --global nuget-license || continue
       PATH=/root/.dotnet/tools:$PATH
             
       echo "Projects: $PROJECTS"
       projects=$(echo "$PROJECTS" | jq -r '.[]')
       echo "Found Projects: $projects"
       mkdir -p out
             
       for project in $projects; do
         echo "Checking licenses for: $project"
         projectName=$(basename "$project" .csproj)
         output_path="out/${projectName}-licenses.json"
         nuget-license \
          --input "$project" \
          --include-shared-projects \
          --output table \
          --allowed-license-types "$ALLOWED_LICENSES_PATH" \
          --ignored-packages "$IGNORED_PACKAGES_PATH" \
          --file-output "$output_path"
         echo "License check outputted to $output_path"
       done
#    - name: Output Markdown Tables
#      shell: bash
#      run: |
#        projects=$(echo "$PROJECTS" | jq -r '.[]')
#        for project in $projects; do
#          projectName=$(basename "$project" .csproj)
#          echo "Generating Markdown table for $projectName"
#          output_path="out/${projectName}-licenses.json"
#          # Generate markdown table for each project
#          if [ -f "$output_path" ]; then
#            echo "::group::Licenses for $projectName"
#            npx --yes jsonschema2mk --schema "$output_path" > "out/${projectName}-licenses.md"
#            echo "::endgroup::"
#          else
#            echo "No license file found at $output_path"
#          fi
#        done
#      working-directory: ${{ github.workspace }}
#    - name: Upload Artifacts
#      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
#      with:
#        name: license-reports
#        path: out/
